{"version":3,"sources":["webpack:///../src/layout/container.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","style","className","scope","isMDXComponent"],"mappings":"yRAQaA,EAAe,Q,gOAC5B,MAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAHgC,WACjCC,GAEC,EADEC,EACF,iBACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,kBACE,GAAM,aADR,aAGA,kFAAiE,iBAAGC,WAAW,IAC3E,KAAQ,sCADqD,SAGjE,kBACE,GAAM,iBADR,iBAGA,6EAA4D,sBAAQA,WAAW,KAAnB,+CAA5D,2GAAuP,kBAAIA,WAAW,KAAf,OAAvP,+DACA,iEACA,sBACE,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,cAApB,kBAA8F,0BAAYA,WAAW,MAAvB,aAA9F,kCACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,oBAApB,cAAgG,0BAAYA,WAAW,MAAvB,eAAhG,wBAEF,yEAAwD,0BAAYA,WAAW,KAAvB,aAAxD,4BACA,qBAAOC,MAAO,CACZ,SAAY,UAEhB,yBACE,sBACE,kBAAIC,UAAU,gBACd,kBAAIC,MAAM,OAAV,cACa,uBACX,oBAAMD,UAAU,aAAhB,WAEF,kBAAIC,MAAM,OAAV,QACO,uBACL,oBAAMD,UAAU,aAAhB,WAEF,kBAAIC,MAAM,OAAV,SACQ,uBACN,oBAAMD,UAAU,aAAhB,WAEF,kBAAIC,MAAM,OAAV,QACO,uBACL,oBAAMD,UAAU,aAAhB,WAEF,kBAAIC,MAAM,OAAV,UACS,uBACP,oBAAMD,UAAU,aAAhB,YAEF,kBAAIC,MAAM,OAAV,WACU,uBACR,oBAAMD,UAAU,aAAhB,cAIN,yBACE,sBACE,kBAAIC,MAAM,MAAMD,UAAU,aAA1B,cACA,kBAAIA,UAAU,QAAd,QACA,+BACA,+BACA,+BACA,gCACA,iCAEF,sBACE,kBAAIC,MAAM,MAAMD,UAAU,aAA1B,oBACA,kBAAIA,UAAU,QAAd,QACA,kBAAIA,UAAU,QAAd,QACA,kBAAIA,UAAU,QAAd,QACA,kBAAIA,UAAU,QAAd,QACA,kBAAIA,UAAU,QAAd,QACA,kBAAIA,UAAU,QAAd,WAIF,kBACE,GAAM,qBADR,qBAGA,oCAAmB,0BAAYF,WAAW,KAAvB,cAAnB,8DAAwI,0BAAYA,WAAW,KAAvB,aAAxI,gCACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,iBADZ,qEAML,kBACE,GAAM,oBADR,oBAGA,4BAAW,0BAAYA,WAAW,KAAvB,oBAAX,2EACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,iBADZ,yD,8NAUTJ,EAAWQ,gBAAiB","file":"component---src-layout-container-mdx-fddaa271b61590eb1e87.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/vinimarcili/dev/Squid/css/src/docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"container\"\n    }}>{`Container`}</h1>\n    <p>{`The Container are based on the Bootstrap 5 grid, see docs `}<a parentName=\"p\" {...{\n        \"href\": \"https://getbootstrap.com/docs/5.0/\"\n      }}>{`here`}</a></p>\n    <h2 {...{\n      \"id\": \"how-they-work\"\n    }}>{`How they work`}</h2>\n    <p>{`Containers are the most basic layout element and are `}<strong parentName=\"p\">{`required when using our default grid system`}</strong>{`. Containers are used to contain, pad, and (sometimes) center the content within them. While containers `}<em parentName=\"p\">{`can`}</em>{` be nested, most layouts do not require a nested container.`}</p>\n    <p>{`CSS comes with two different containers:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`.container`}</inlineCode>{`, which sets a `}<inlineCode parentName=\"li\">{`max-width`}</inlineCode>{` at each responsive breakpoint`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`.container-fluid`}</inlineCode>{`, which is `}<inlineCode parentName=\"li\">{`width: 100%`}</inlineCode>{` at all breakpoints`}</li>\n    </ul>\n    <p>{`The table below illustrates how each container's `}<inlineCode parentName=\"p\">{`max-width`}</inlineCode>{` across each breakpoint.`}</p>\n    <table style={{\n      \"maxWidth\": \"700px\"\n    }}>\n  <thead>\n    <tr>\n      <th className=\"border-dark\"></th>\n      <th scope=\"col\">\n        Extra small<br />\n        <span className=\"text-bold\">&lt;576px</span>\n      </th>\n      <th scope=\"col\">\n        Small<br />\n        <span className=\"text-bold\">&ge;576px</span>\n      </th>\n      <th scope=\"col\">\n        Medium<br />\n        <span className=\"text-bold\">&ge;768px</span>\n      </th>\n      <th scope=\"col\">\n        Large<br />\n        <span className=\"text-bold\">&ge;992px</span>\n      </th>\n      <th scope=\"col\">\n        X-Large<br />\n        <span className=\"text-bold\">&ge;1200px</span>\n      </th>\n      <th scope=\"col\">\n        XX-Large<br />\n        <span className=\"text-bold\">&ge;1400px</span>\n      </th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td scope=\"row\" className=\"text-bold\">.container</td>\n      <td className=\"gray\">100%</td>\n      <td>540px</td>\n      <td>720px</td>\n      <td>960px</td>\n      <td>1140px</td>\n      <td>1320px</td>\n    </tr>\n    <tr>\n      <td scope=\"row\" className=\"text-bold\">.container-fluid</td>\n      <td className=\"gray\">100%</td>\n      <td className=\"gray\">100%</td>\n      <td className=\"gray\">100%</td>\n      <td className=\"gray\">100%</td>\n      <td className=\"gray\">100%</td>\n      <td className=\"gray\">100%</td>\n    </tr>\n  </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"default-container\"\n    }}>{`Default container`}</h2>\n    <p>{`Our default `}<inlineCode parentName=\"p\">{`.container`}</inlineCode>{` class is a responsive, fixed-width container, meaning its `}<inlineCode parentName=\"p\">{`max-width`}</inlineCode>{` changes at each breakpoint.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<div class=\"container\">\n  <!-- Content here -->\n</div>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"fluid-containers\"\n    }}>{`Fluid containers`}</h2>\n    <p>{`Use `}<inlineCode parentName=\"p\">{`.container-fluid`}</inlineCode>{` for a full width container, spanning the entire width of the viewport.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<div class=\"container-fluid\">\n  ...\n</div>\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}