{"version":3,"sources":["webpack:///../src/utilities/colors.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","className","href","style","isMDXComponent"],"mappings":"yRAQaA,EAAe,Q,gOAC5B,MAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAHgC,WACjCC,GAEC,EADEC,EACF,iBACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,kBACE,GAAM,UADR,UAGA,+EAA8D,uBAA9D,0DACmD,0BAAYC,WAAW,KAAvB,SADnD,iDACsJ,0BAAYA,WAAW,KAAvB,eADtJ,KAEA,6EAAwD,iBAAGC,UAAU,OAAOC,KAAK,eAAzB,oBACxD,iBAAGD,UAAU,QAAb,qDACA,kBACE,GAAM,mBADR,mBAGA,sCAAqB,0BAAYD,WAAW,KAAvB,SAArB,2CACA,iBAAGC,UAAU,QAAb,wBAGA,iBAAGA,UAAU,cAAb,8BAGA,iBAAGA,UAAU,QAAb,wBAGA,uBAAK,oBAAMD,WAAW,MAClB,UAAa,iBADZ,iKAYL,kBACE,GAAM,8BADR,8BAGA,sCAAqB,0BAAYA,WAAW,KAAvB,oBAArB,0DAA4I,0BAAYA,WAAW,KAAvB,eAA5I,KACA,iBAAGC,UAAU,uBAAb,wCAGA,iBAAGA,UAAU,mCAAb,8CAGA,iBAAGA,UAAU,uBAAb,wCAGA,uBAAK,oBAAMD,WAAW,MAClB,UAAa,iBADZ,kPAYL,kBACE,GAAM,0BADR,0BAGA,sCAAqB,0BAAYA,WAAW,KAAvB,gBAArB,0DAAwI,0BAAYA,WAAW,KAAvB,WAAxI,oCAC4B,0BAAYA,WAAW,KAAvB,UAD5B,6CAC4H,0BAAYA,WAAW,KAAvB,iCAD5H,UAEE,0BAAYA,WAAW,KAAvB,eAFF,4CAGA,iBAAGC,UAAU,kBAAkBE,MAAO,CACpC,OAAU,0BADZ,oCAKA,iBAAGF,UAAU,wBAAwBE,MAAO,CAC1C,OAAU,0BADZ,0CAKA,iBAAGF,UAAU,kBAAkBE,MAAO,CACpC,OAAU,0BADZ,oCAKA,uBAAK,oBAAMH,WAAW,MAClB,UAAa,iBADZ,kV,8NAgBTJ,EAAWQ,gBAAiB","file":"component---src-utilities-colors-mdx-32b92dbdb90fe774d2a0.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/vinimarcili/dev/Squid/css/src/docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"colors\"\n    }}>{`Colors`}</h1>\n    <p>{`We use a relatively extensive set of cores within CSS. `}<br />{`\nAll colors in addition to being SASS variables (like `}<inlineCode parentName=\"p\">{`$pink`}</inlineCode>{`) are also CSS variables to use globally like `}<inlineCode parentName=\"p\">{`var(--pink)`}</inlineCode>{`.`}</p>\n    <p>To see all the colors and their variations go to the <a className='pink' href='/styleguide'>Styleguide page</a></p>\n    <p className='mb-3'>All colors have three types of auxiliary classes.</p>\n    <h2 {...{\n      \"id\": \"color-attribute\"\n    }}>{`Color Attribute`}</h2>\n    <p>{`To change the `}<inlineCode parentName=\"p\">{`color`}</inlineCode>{` rule just use the color name as class.`}</p>\n    <p className='pink'>\n  I`m a pink paragraph\n    </p>\n    <p className='pink-light'>\n  I`m a pink light paragraph\n    </p>\n    <p className='blue'>\n  I`m a blue paragraph\n    </p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<p class='pink'>\n  I\\`m a pink paragraph\n</p>\n<p class='pink-light'>\n  I\\`m a pink light paragraph\n</p>\n<p class='blue'>\n  I\\`m a blue paragraph\n</p>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"background-color-attribute\"\n    }}>{`Background Color Attribute`}</h2>\n    <p>{`To change the `}<inlineCode parentName=\"p\">{`background-color`}</inlineCode>{` rule just use the color name as class with the prefix `}<inlineCode parentName=\"p\">{`background-`}</inlineCode>{`.`}</p>\n    <p className='background-pink p-2'>\n  I`m a paragraph with background pink\n    </p>\n    <p className='background-pink-light black p-2'>\n  I`m a paragraph with background pink light\n    </p>\n    <p className='background-blue p-2'>\n  I`m a paragraph with background blue\n    </p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<p class='background-pink'>\n  I\\`m a paragraph with background pink\n</p>\n<p class='background-pink-light'>\n  I\\`m a paragraph with background pink light\n</p>\n<p class='background-blue'>\n  I\\`m a paragraph with background blue\n</p>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"border-color-attribute\"\n    }}>{`Border Color Attribute`}</h2>\n    <p>{`To change the `}<inlineCode parentName=\"p\">{`border-color`}</inlineCode>{` rule just use the color name as class with the prefix `}<inlineCode parentName=\"p\">{`border-`}</inlineCode>{`.\nThe element needs to have the `}<inlineCode parentName=\"p\">{`border`}</inlineCode>{` property set, the example below is using `}<inlineCode parentName=\"p\">{`border: 1px solid transparent`}</inlineCode>{`.\nThe `}<inlineCode parentName=\"p\">{`transparent`}</inlineCode>{` will be overwritten by the color class.`}</p>\n    <p className='border-pink p-2' style={{\n      \"border\": \"1px solid transparent\"\n    }}>\n  I`m a paragraph with border pink\n    </p>\n    <p className='border-pink-light p-2' style={{\n      \"border\": \"1px solid transparent\"\n    }}>\n  I`m a paragraph with border pink light\n    </p>\n    <p className='border-blue p-2' style={{\n      \"border\": \"1px solid transparent\"\n    }}>\n  I`m a paragraph with border blue\n    </p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<p class='border-pink' style='border: 1px solid transparent'>\n  I\\`m a paragraph with border pink\n</p>\n<p class='border-pink-light' style='border: 1px solid transparent'>\n  I\\`m a paragraph with border pink light\n</p>\n<p class='border-blue' style='border: 1px solid transparent'>\n  I\\`m a paragraph with border blue\n</p>\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}