{"version":3,"sources":["webpack:///../src/layout/container.mdx"],"names":["_frontmatter","Object","isExtensible","prototype","hasOwnProperty","call","defineProperty","configurable","value","name","filename","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutProperties","mdx","_extends","mdxType","parentName","style","className","scope","isMDXComponent"],"mappings":"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","file":"component---src-layout-container-mdx-8edff26a426bde9cf5c8.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/css/css/src/docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"container\"\n    }}>{`Container`}</h1>\n    <p>{`The Container are based on the Bootstrap 5 grid, see docs `}<a parentName=\"p\" {...{\n        \"href\": \"https://getbootstrap.com/docs/5.0/\"\n      }}>{`here`}</a></p>\n    <h2 {...{\n      \"id\": \"how-they-work\"\n    }}>{`How they work`}</h2>\n    <p>{`Containers are the most basic layout element and are `}<strong parentName=\"p\">{`required when using our default grid system`}</strong>{`. Containers are used to contain, pad, and (sometimes) center the content within them. While containers `}<em parentName=\"p\">{`can`}</em>{` be nested, most layouts do not require a nested container.`}</p>\n    <p>{`CSS comes with two different containers:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`.container`}</inlineCode>{`, which sets a `}<inlineCode parentName=\"li\">{`max-width`}</inlineCode>{` at each responsive breakpoint`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`.container-fluid`}</inlineCode>{`, which is `}<inlineCode parentName=\"li\">{`width: 100%`}</inlineCode>{` at all breakpoints`}</li>\n    </ul>\n    <p>{`The table below illustrates how each container's `}<inlineCode parentName=\"p\">{`max-width`}</inlineCode>{` across each breakpoint.`}</p>\n    <table style={{\n      \"maxWidth\": \"700px\"\n    }}>\n  <thead>\n    <tr>\n      <th className=\"border-dark\"></th>\n      <th scope=\"col\">\n        Extra small<br />\n        <span className=\"text-bold\">&lt;576px</span>\n      </th>\n      <th scope=\"col\">\n        Small<br />\n        <span className=\"text-bold\">&ge;576px</span>\n      </th>\n      <th scope=\"col\">\n        Medium<br />\n        <span className=\"text-bold\">&ge;768px</span>\n      </th>\n      <th scope=\"col\">\n        Large<br />\n        <span className=\"text-bold\">&ge;992px</span>\n      </th>\n      <th scope=\"col\">\n        X-Large<br />\n        <span className=\"text-bold\">&ge;1200px</span>\n      </th>\n      <th scope=\"col\">\n        XX-Large<br />\n        <span className=\"text-bold\">&ge;1400px</span>\n      </th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td scope=\"row\" className=\"text-bold\">.container</td>\n      <td className=\"gray\">100%</td>\n      <td>540px</td>\n      <td>720px</td>\n      <td>960px</td>\n      <td>1140px</td>\n      <td>1320px</td>\n    </tr>\n    <tr>\n      <td scope=\"row\" className=\"text-bold\">.container-fluid</td>\n      <td className=\"gray\">100%</td>\n      <td className=\"gray\">100%</td>\n      <td className=\"gray\">100%</td>\n      <td className=\"gray\">100%</td>\n      <td className=\"gray\">100%</td>\n      <td className=\"gray\">100%</td>\n    </tr>\n  </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"default-container\"\n    }}>{`Default container`}</h2>\n    <p>{`Our default `}<inlineCode parentName=\"p\">{`.container`}</inlineCode>{` class is a responsive, fixed-width container, meaning its `}<inlineCode parentName=\"p\">{`max-width`}</inlineCode>{` changes at each breakpoint.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<div class=\"container\">\n  <!-- Content here -->\n</div>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"fluid-containers\"\n    }}>{`Fluid containers`}</h2>\n    <p>{`Use `}<inlineCode parentName=\"p\">{`.container-fluid`}</inlineCode>{` for a full width container, spanning the entire width of the viewport.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<div class=\"container-fluid\">\n  ...\n</div>\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}