(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{WI53:function(e,a,r){"use strict";r.r(a),r.d(a,"_frontmatter",(function(){return o})),r.d(a,"default",(function(){return c}));var t=r("Fcif"),n=r("dV/x"),p=(r("mXGw"),r("/FXl")),l=r("TjRS");r("aD51");const b=["components"],o={};void 0!==o&&o&&o===Object(o)&&Object.isExtensible(o)&&!o.hasOwnProperty("__filemeta")&&Object.defineProperty(o,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/utilities/colors.mdx"}});const i={_frontmatter:o},s=l.a;function c(e){let{components:a}=e,r=Object(n.a)(e,b);return Object(p.b)(s,Object(t.a)({},i,r,{components:a,mdxType:"MDXLayout"}),Object(p.b)("h1",{id:"colors"},"Colors"),Object(p.b)("p",null,"We use a relatively extensive set of cores within CSS. ",Object(p.b)("br",null),"\nAll colors in addition to being SASS variables are also CSS variables."),Object(p.b)("p",null,"To see all the colors and their variations go to the ",Object(p.b)("a",{className:"pink",href:"/styleguide"},"Styleguide page")),Object(p.b)("p",{className:"mb-3"},"All colors have three types of auxiliary classes."),Object(p.b)("h2",{id:"color-attribute"},"Color Attribute"),Object(p.b)("p",null,"To change the ",Object(p.b)("inlineCode",{parentName:"p"},"color")," rule just use the color name as class."),Object(p.b)("p",{className:"pink"},"I`m a pink paragraph"),Object(p.b)("p",{className:"pink-light"},"I`m a pink light paragraph"),Object(p.b)("p",{className:"blue"},"I`m a blue paragraph"),Object(p.b)("pre",null,Object(p.b)("code",{parentName:"pre",className:"language-html"},"<p class='pink'>\n  I`m a pink paragraph\n</p>\n<p class='pink-light'>\n  I`m a pink light paragraph\n</p>\n<p class='blue'>\n  I`m a blue paragraph\n</p>\n")),Object(p.b)("h2",{id:"background-color-attribute"},"Background Color Attribute"),Object(p.b)("p",null,"To change the ",Object(p.b)("inlineCode",{parentName:"p"},"background-color")," rule just use the color name as class with the prefix ",Object(p.b)("inlineCode",{parentName:"p"},"background-"),"."),Object(p.b)("p",{className:"background-pink p-2"},"I`m a paragraph with background pink"),Object(p.b)("p",{className:"background-pink-light black p-2"},"I`m a paragraph with background pink light"),Object(p.b)("p",{className:"background-blue p-2"},"I`m a paragraph with background blue"),Object(p.b)("pre",null,Object(p.b)("code",{parentName:"pre",className:"language-html"},"<p class='background-pink'>\n  I`m a paragraph with background pink\n</p>\n<p class='background-pink-light'>\n  I`m a paragraph with background pink light\n</p>\n<p class='background-blue'>\n  I`m a paragraph with background blue\n</p>\n")),Object(p.b)("h2",{id:"border-color-attribute"},"Border Color Attribute"),Object(p.b)("p",null,"To change the ",Object(p.b)("inlineCode",{parentName:"p"},"border-color")," rule just use the color name as class with the prefix ",Object(p.b)("inlineCode",{parentName:"p"},"border-"),".\nThe element needs to have the ",Object(p.b)("inlineCode",{parentName:"p"},"border")," property set, the example below is using ",Object(p.b)("inlineCode",{parentName:"p"},"border: 1px solid transparent"),".\nThe ",Object(p.b)("inlineCode",{parentName:"p"},"transparent")," will be overwritten by the color class."),Object(p.b)("p",{className:"border-pink p-2",style:{border:"1px solid transparent"}},"I`m a paragraph with border pink"),Object(p.b)("p",{className:"border-pink-light p-2",style:{border:"1px solid transparent"}},"I`m a paragraph with border pink light"),Object(p.b)("p",{className:"border-blue p-2",style:{border:"1px solid transparent"}},"I`m a paragraph with border blue"),Object(p.b)("pre",null,Object(p.b)("code",{parentName:"pre",className:"language-html"},"<p class='border-pink p-2' style='border: 1px solid transparent'>\n  I`m a paragraph with border pink\n</p>\n<p class='border-pink-light p-2' style='border: 1px solid transparent'>\n  I`m a paragraph with border pink light\n</p>\n<p class='border-blue p-2' style='border: 1px solid transparent'>\n  I`m a paragraph with border blue\n</p>\n")))}void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/utilities/colors.mdx"}}),c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-utilities-colors-mdx-f3946f7ad717389ab650.js.map