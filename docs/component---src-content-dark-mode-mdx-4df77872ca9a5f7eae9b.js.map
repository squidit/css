{"version":3,"sources":["webpack:///../src/content/dark-mode.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"yRAQaA,EAAe,Q,iOAC5B,MAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAHgC,WACjCC,GAEC,EADEC,EACF,iBACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,kBACE,GAAM,aADR,aAGA,gIAEA,sBACE,kBAAIC,WAAW,MAAf,gCACA,kBAAIA,WAAW,MAAf,6BAEF,kBACE,GAAM,iCADR,mCAGA,qHAAoG,0BAAYA,WAAW,KAAvB,wBAApG,aACA,kBACE,GAAM,8BADR,+BAGA,0KACA,8BACE,iBAAGA,WAAW,cAAd,iBAEF,uBAAK,oBAAMA,WAAW,MAClB,UAAa,iBADZ,uEASL,8BACE,iBAAGA,WAAW,cAAd,kBAEF,uBAAK,oBAAMA,WAAW,MAClB,UAAa,iBADZ,wEASL,kBACE,GAAM,aADR,aAGA,kPACA,uBAAK,oBAAMA,WAAW,OAAjB,+I,+NAYTJ,EAAWK,gBAAiB","file":"component---src-content-dark-mode-mdx-4df77872ca9a5f7eae9b.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/vinimarcili/dev/Squid/css/src/docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"dark-mode\"\n    }}>{`Dark Mode`}</h1>\n    <p>{`We bring already configured a theme of dark mode.\nThe exchange of variables is done in two situations:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`By user's browser preference`}</li>\n      <li parentName=\"ol\">{`With a class in the body`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"1-by-users-browser-preference\"\n    }}>{`1. By user's browser preference`}</h2>\n    <p>{`The user doesn't need to do anything, the change will be done automatically according to the `}<inlineCode parentName=\"p\">{`prefers-color-scheme`}</inlineCode>{` css rule`}</p>\n    <h2 {...{\n      \"id\": \"2-with-a-class-in-the-body\"\n    }}>{`2. With a class in the body`}</h2>\n    <p>{`If there is a need to lock this automatic switch or make a theme selector for the user, just add a class in the body for their respective themes:`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`To dark mode`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<html>\n  ...\n  <body class=\"dark\">\n    ...\n  </body>\n</html\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`To light mode`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<html>\n  ...\n  <body class=\"light\">\n    ...\n  </body>\n</html\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"variables\"\n    }}>{`Variables`}</h2>\n    <p>{`List of variables that change with the change of theme if there is a need to use it in a custom component, these are the variables changed in the change of the theme that reflect in all the components of the framework`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`  --background\n  --background_secondary\n  --text_color\n  --background_third\n  --shadow_color\n  --box_shadow\n  --border_color\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}