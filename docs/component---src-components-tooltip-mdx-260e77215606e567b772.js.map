{"version":3,"sources":["webpack:///../src/components/tooltip.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","className","data-tooltip-theme","data-tooltip","parentName","isMDXComponent"],"mappings":"yRAQaA,EAAe,Q,kOAC5B,MAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAHgC,WACjCC,GAEC,EADEC,EACF,iBACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,kBACE,GAAM,WADR,WAGA,iIACA,mBAAKC,UAAU,aACjB,uCADE,yCAC8D,oBAAMA,UAAU,QAAhB,YAD9D,4BAGA,mBAAKA,UAAU,aACjB,2CADE,oRAGA,kBACE,GAAM,SADR,SAGA,mBAAKA,UAAU,0CAA0CC,qBAAmB,QAAQC,eAAa,gBAAjG,mBAGA,uBAAK,oBAAMC,WAAW,MAClB,UAAa,iBADZ,+GASL,kBACE,GAAM,QADR,QAGA,mBAAKH,UAAU,0CAA0CE,eAAa,gBAAtE,mBAGA,uBAAK,oBAAMC,WAAW,MAClB,UAAa,iBADZ,iFAQL,kBACE,GAAM,cADR,cAGA,kBACE,GAAM,WADR,WAGA,sCAAqB,0BAAYA,WAAW,KAAvB,wBAArB,WAAiG,0BAAYA,WAAW,KAAvB,SAAjG,gDACA,kBACE,GAAM,YADR,YAGA,sCAAqB,0BAAYA,WAAW,KAAvB,yBAArB,YACA,uBAAK,oBAAMA,WAAW,OAAjB,0HAUL,kBACE,GAAM,SADR,SAGA,sCAAqB,0BAAYA,WAAW,KAAvB,sBAArB,WAA+F,0BAAYA,WAAW,KAAvB,QAA/F,mBAAmK,0BAAYA,WAAW,KAAvB,SAAnK,iB,gOAKJP,EAAWQ,gBAAiB","file":"component---src-components-tooltip-mdx-260e77215606e567b772.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/vinimarcili/dev/Squid/css/src/docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"tooltip\"\n    }}>{`Tooltip`}</h1>\n    <p>{`Documentation and examples for adding custom tooltips with CSS and JavaScript using CSS3 for animations.`}</p>\n    <div className='box black'>\n  <strong>Attention</strong>: the use of the components needs the <span className='pink'>squid.js</span> included in the project\n    </div>\n    <div className='box black'>\n  <strong>Attention + 1</strong>: Probably the interaction via Javascript should not work well in SPA applications (independent of the framework React, Angular, Vuejs, etc). For now we have no implementation but we will create in the future, for now just use the styles and create your own implementation\n    </div>\n    <h2 {...{\n      \"id\": \"light\"\n    }}>{`Light`}</h2>\n    <div className='button button-pink display-inline-block' data-tooltip-theme='light' data-tooltip='Hello World!'>\n  Mouse Over Here\n    </div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<div\n  data-tooltip='Some Text'\n  data-tooltip-theme='light'\n>\n  <!-- HTML CONTENT -->\n</div>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"dark\"\n    }}>{`Dark`}</h2>\n    <div className='button button-pink display-inline-block' data-tooltip='Hello World!'>\n  Mouse Over Here\n    </div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<div\n  data-tooltip='Some Text'\n>\n  <!-- HTML CONTENT -->\n</div>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"attributes\"\n    }}>{`Attributes`}</h3>\n    <h2 {...{\n      \"id\": \"trigger\"\n    }}>{`Trigger`}</h2>\n    <p>{`The attribute `}<inlineCode parentName=\"p\">{`data-tooltip-trigger`}</inlineCode>{` accept `}<inlineCode parentName=\"p\">{`click`}</inlineCode>{` value. To use mouseover just leave it empty`}</p>\n    <h2 {...{\n      \"id\": \"position\"\n    }}>{`Position`}</h2>\n    <p>{`The attribute `}<inlineCode parentName=\"p\">{`data-tooltip-position`}</inlineCode>{` accept:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`right top\nright center\nright bottom\ncenter top\ncenter center\ncenter bottom\nleft top\nleft center\nleft bottom\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"theme\"\n    }}>{`Theme`}</h2>\n    <p>{`The attribute `}<inlineCode parentName=\"p\">{`data-tooltip-theme`}</inlineCode>{` accept `}<inlineCode parentName=\"p\">{`dark`}</inlineCode>{` (or empty) and `}<inlineCode parentName=\"p\">{`light`}</inlineCode>{` values`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}