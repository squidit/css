{"version":3,"sources":["webpack:///../src/content/dark-mode.mdx"],"names":["_frontmatter","Object","isExtensible","prototype","hasOwnProperty","call","defineProperty","configurable","value","name","filename","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutProperties","mdx","_extends","mdxType","parentName","isMDXComponent"],"mappings":"kQAMO,MAAMA,EAAe,QAAG,IAAAA,UAAAC,OAAAD,IAAAC,OAAAC,aAAAF,KAAAC,OAAAE,UAAAC,eAAAC,KAAAL,EAAA,eAAAC,OAAAK,eAAAN,EAAA,cAAAO,cAAA,EAAAC,MAAA,CAAAC,KAAA,eAAAC,SAAA,+BAC/B,MAAMC,EAAc,CAClBX,gBAEIY,EAAYC,IACH,SAASC,EAAUC,GAG/B,IAHgC,WACjCC,GAEDD,EADIE,EAAKC,YAAAH,EAAA,gBAER,OAAOI,YAACP,EAASQ,YAAA,GAAKT,EAAiBM,EAAK,CAAED,WAAYA,EAAYK,QAAQ,cAG5EF,YAAA,MACE,GAAM,aAAW,aAEnBA,YAAA,oHAEAA,YAAA,UACEA,YAAA,MAAIG,WAAW,MAAI,gCACnBH,YAAA,MAAIG,WAAW,MAAI,6BAErBH,YAAA,MACE,GAAM,iCAA+B,mCAEvCA,YAAA,yGAAoGA,YAAA,cAAYG,WAAW,KAAG,wBAAsC,aACpKH,YAAA,MACE,GAAM,8BAA4B,+BAEpCA,YAAA,8JACAA,YAAA,kBACEA,YAAA,KAAGG,WAAW,cAAY,iBAE5BH,YAAA,WAAKA,YAAA,QAAMG,WAAW,MAClB,UAAa,iBAAe,kCAIhCH,YAAA,kBACEA,YAAA,KAAGG,WAAW,cAAY,kBAE5BH,YAAA,WAAKA,YAAA,QAAMG,WAAW,MAClB,UAAa,iBAAe,mCAIhCH,YAAA,MACE,GAAM,aAAW,aAEnBA,YAAA,sOACAA,YAAA,WAAKA,YAAA,QAAMG,WAAW,OAAK,sLAY9B,IAAAR,UAAAb,OAAAa,IAAAb,OAAAC,aAAAY,KAAAb,OAAAE,UAAAC,eAAAC,KAAAS,EAAA,eAAAb,OAAAK,eAAAQ,EAAA,cAAAP,cAAA,EAAAC,MAAA,CAAAC,KAAA,aAAAC,SAAA,+BAEDI,EAAWS,gBAAiB","file":"component---src-content-dark-mode-mdx-0b9707495492289556b7.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/css/css/src/docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"dark-mode\"\n    }}>{`Dark Mode`}</h1>\n    <p>{`We bring already configured a theme of dark mode.\nThe exchange of variables is done in two situations:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`By user's browser preference`}</li>\n      <li parentName=\"ol\">{`With a class in the body`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"1-by-users-browser-preference\"\n    }}>{`1. By user's browser preference`}</h2>\n    <p>{`The user doesn't need to do anything, the change will be done automatically according to the `}<inlineCode parentName=\"p\">{`prefers-color-scheme`}</inlineCode>{` css rule`}</p>\n    <h2 {...{\n      \"id\": \"2-with-a-class-in-the-body\"\n    }}>{`2. With a class in the body`}</h2>\n    <p>{`If there is a need to lock this automatic switch or make a theme selector for the user, just add a class in the html for their respective themes:`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`To dark mode`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<html class=\"dark\">\n</html\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`To light mode`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<html class=\"light\">\n</html\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"variables\"\n    }}>{`Variables`}</h2>\n    <p>{`List of variables that change with the change of theme if there is a need to use it in a custom component, these are the variables changed in the change of the theme that reflect in all the components of the framework`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`  --background\n  --background_secondary\n  --text_color\n  --title_color\n  --background_third\n  --background_reset\n  --shadow_color\n  --box_shadow\n  --border_color\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}