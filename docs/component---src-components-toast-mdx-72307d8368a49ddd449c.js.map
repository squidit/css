{"version":3,"sources":["webpack:///../src/components/toast.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","className","type","onClick","Toast","show","closeButton","position","parentName","isMDXComponent"],"mappings":"yRAQaA,EAAe,Q,gOAC5B,MAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAHgC,WACjCC,GAEC,EADEC,EACF,iBACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,kBACE,GAAM,SADR,SAGA,kKAEA,mBAAKC,UAAU,aACjB,uCADE,yCAC8D,oBAAMA,UAAU,QAAhB,YAD9D,4BAGA,mBAAKA,UAAU,aACjB,2CADE,iJAGA,kBACE,GAAM,WADR,WAGA,sBAAQC,KAAK,SAASD,UAAU,gCAAgCE,QAAS,IAAMC,MAAMC,KAAK,cAAe,CACvGC,aAAa,EACbC,SAAU,YACVN,UAAW,MAHb,cAOA,uBAAK,oBAAMO,WAAW,MAClB,UAAa,iBADZ,0KASL,kBACE,GAAM,SADR,SAGA,+DAA8C,0BAAYA,WAAW,KAAvB,sBAA9C,KAAkH,0BAAYA,WAAW,KAAvB,oBAAlH,sBACA,uBAAK,oBAAMA,WAAW,OAAjB,iEAQL,kBACE,GAAM,YADR,YAGA,gDAA+B,0BAAYA,WAAW,KAAvB,YAA/B,cACA,uBAAK,oBAAMA,WAAW,OAAjB,+BAKL,kBACE,GAAM,aADR,aAGA,qBAAG,0BAAYA,WAAW,KAAvB,aAAH,sEACA,kBACE,GAAM,eADR,eAGA,2EAA0D,0BAAYA,WAAW,KAAvB,sBAC1D,kBACE,GAAM,QADR,QAGA,qCAAoB,0BAAYA,WAAW,KAAvB,SAApB,QAA8E,0BAAYA,WAAW,KAAvB,QAA9E,OAAsI,0BAAYA,WAAW,KAAvB,aAAtI,oB,8NAKJX,EAAWY,gBAAiB","file":"component---src-components-toast-mdx-72307d8368a49ddd449c.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/vinimarcili/dev/Squid/css/src/docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"toast\"\n    }}>{`Toast`}</h1>\n    <p>{`Push notifications to your visitors with a toast, a lightweight and easily customizable alert message.\nToast works as a reactive service`}</p>\n    <div className='box black'>\n  <strong>Attention</strong>: the use of the components needs the <span className='pink'>squid.js</span> included in the project\n    </div>\n    <div className='box black'>\n  <strong>Attention + 1</strong>: Probably the interaction via Javascript should not work well in SPA applications needs some implementation to acess Toast on window element\n    </div>\n    <h2 {...{\n      \"id\": \"exemple\"\n    }}>{`Exemple`}</h2>\n    <button type='button' className='button inverted button-black ' onClick={() => Toast.show(\"Hello world\", {\n      closeButton: true,\n      position: \"top right\",\n      className: \"\"\n    })}>\n  Click here\n    </button>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<button\n  type='button'\n  on-click='() => Toast.show(\"Hello world\", { closeButton: true, position: \"top right\", className: \"\" })'\n>\n  Click here\n</button>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"types\"\n    }}>{`Types`}</h2>\n    <p>{`Toast has standard types, to call like `}<inlineCode parentName=\"p\">{`Toast.success(...)`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`Toast.error(...)`}</inlineCode>{`, etc... They are:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`show\ninverted\nsuccess\nwarning\nerror\ngrayscale\ncustom\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"position\"\n    }}>{`Position`}</h2>\n    <p>{`Combine these values on `}<inlineCode parentName=\"p\">{`position`}</inlineCode>{` attribute`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`top\nbottom\nleft\nright\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"classname\"\n    }}>{`ClassName`}</h2>\n    <p><inlineCode parentName=\"p\">{`className`}</inlineCode>{` accepet a string that add a class to tooltip container on show it`}</p>\n    <h2 {...{\n      \"id\": \"closebutton\"\n    }}>{`CloseButton`}</h2>\n    <p>{`Boolean value to show or not close button. Default `}<inlineCode parentName=\"p\">{`closeButton: true`}</inlineCode></p>\n    <h2 {...{\n      \"id\": \"full\"\n    }}>{`Full`}</h2>\n    <p>{`To Toast use `}<inlineCode parentName=\"p\">{`100vw`}</inlineCode>{` add `}<inlineCode parentName=\"p\">{`full`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`className`}</inlineCode>{` attribute`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}